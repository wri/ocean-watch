name: PR Commit Stage

# This workflow is triggered on pull requests to the main branch
on:
  pull_request:
    branches: [ main ]

jobs:
  checkout_and_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.17'

      - name: Cache Node Modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # Cache dependencies using a key for installers and dependencies
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm install

      - name: Run Lint
        run: npm run lint

  test:
    needs: checkout_and_lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.17'

      - name: Cache Node Modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # Cache dependencies using a key for installers and dependencies
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: No-op Test Placeholder
        run: echo "No tests implemented yet"

  init-copilot:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ocean-watch-deployer
          role-duration-seconds: 1800

      - name: DEBUG - Test AWS CLI with assumed role
        run: |
          aws sts get-caller-identity

      - name: Install AWS Copilot
        run: |
          # Create a temporary directory for downloading
          mkdir -p ${{ runner.temp }}/copilot-download

          # Download the Copilot binary to the temporary directory
          curl -Lo ${{ runner.temp }}/copilot-download/copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux

          # Make the binary executable
          chmod +x ${{ runner.temp }}/copilot-download/copilot

          # Move the Copilot binary to a directory in PATH
          sudo mv ${{ runner.temp }}/copilot-download/copilot /usr/local/bin/copilot

          # Optional: Clean up the temporary directory
          rm -rf ${{ runner.temp }}/copilot-download

      - name: Check for existing Copilot application
        id: check_app
        run: |
          if copilot app ls | grep -qw "ocean-watch"; then
            echo "App exists."
            echo "app_exists=true" >> $GITHUB_ENV
          else
            echo "App does not exist."
            echo "app_exists=false" >> $GITHUB_ENV
          fi

      - name: Initialize Copilot application
        if: env.app_exists == 'false'
        run: copilot app init ocean-watch --resource-tags program=Oceans,project=OceanWatch,application=OceanWatch

      - name: Setup Git Config
        if: env.app_exists == 'false'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Commit copilot configs
        if: env.app_exists == 'false'
        run: |
          git add -A  # Adds all changes, including untracked files
          git diff-index --quiet HEAD || git commit -m "AWS copilot configs generated by GitHub Actions Bot"
          git push origin HEAD:${{ github.head_ref }}  # Ensure you're pushing to the correct branch

  create-copilot-environment:
    needs: [init-copilot]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Configure AWS Credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ocean-watch-deployer
          role-duration-seconds: 1800
          output-credentials: true

      - name: DEBUG - Test AWS CLI with assumed role
        run: |
          aws sts get-caller-identity

      - name: Install AWS Copilot
        run: |
          # Create a temporary directory for downloading
          mkdir -p ${{ runner.temp }}/copilot-download

          # Download the Copilot binary to the temporary directory
          curl -Lo ${{ runner.temp }}/copilot-download/copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux

          # Make the binary executable
          chmod +x ${{ runner.temp }}/copilot-download/copilot

          # Move the Copilot binary to a directory in PATH
          sudo mv ${{ runner.temp }}/copilot-download/copilot /usr/local/bin/copilot

          # Optional: Clean up the temporary directory
          rm -rf ${{ runner.temp }}/copilot-download

      - name: Check and Create Environment
        run: |
          # Check if the environment exists
          if ! copilot env show --name ${{ github.head_ref }} --json; then
            echo "Environment does not exist, initializing..."
            # Initialize environment if it doesn't exist
            if ! copilot env init --name ${{ github.head_ref }} --app ocean-watch --default-config --region ${{ secrets.AWS_REGION }} --aws-session-token ${{ steps.creds.outputs.aws-session-token }}; then
              echo "Failed to initialize environment."
              cat copilot/environments/deployment-review-apps/manifest.yml
              exit 1
            fi
            # Deploy the new environment
            if ! copilot env deploy --name ${{ github.head_ref }} --app ocean-watch; then
              echo "Failed to deploy environment."
              exit 1
            fi
          else
            echo "Environment already exists."
          fi

      - name: Setup Git Config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Commit copilot configs
        run: |
          git add -A  # Adds all changes, including untracked files
          git diff-index --quiet HEAD || git commit -m "AWS copilot configs generated by GitHub Actions Bot"
          git push origin HEAD:${{ github.head_ref }}  # Ensure you're pushing to the correct branch

  build-and-deploy:
    needs: [test, create-copilot-environment]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: generate ghcr tag
        id: generate_ghcr_tag
        run: |
          SHORT_SHA=${{ github.event.pull_request.head.sha }}
          SHORT_SHA=${SHORT_SHA:0:7}  # Using Bash substring extraction
          echo "::set-output name=image::ghcr.io/${{ github.repository }}/${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}:$SHORT_SHA"

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.generate_ghcr_tag.outputs.image }}
            ghcr.io/${{ github.repository }}/${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}:latest

      - name: Comment PR with GHCR details
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            📦 New Docker Image has been pushed to Github Container Registry (GHCR)
            Image: ${{ steps.generate_ghcr_tag.outputs.image }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ocean-watch-deployer
          role-duration-seconds: 1800

      - name: DEBUG - Test AWS CLI with assumed role
        run: |
          aws sts get-caller-identity

      - name: Install AWS Copilot
        run: |
          # Create a temporary directory for downloading
          mkdir -p ${{ runner.temp }}/copilot-download

          # Download the Copilot binary to the temporary directory
          curl -Lo ${{ runner.temp }}/copilot-download/copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux

          # Make the binary executable
          chmod +x ${{ runner.temp }}/copilot-download/copilot

          # Move the Copilot binary to a directory in PATH
          sudo mv ${{ runner.temp }}/copilot-download/copilot /usr/local/bin/copilot

          # Optional: Clean up the temporary directory
          rm -rf ${{ runner.temp }}/copilot-download

      - name: Handle AWS Secret --> GHCR Access
        run: |
          # Install jq if it's not available
          sudo apt-get update && sudo apt-get install -y jq
          
          SECRET_NAME="ocean-watch-env-${{ github.head_ref }}"
          SECRET_VALUE='{"username":"${{ secrets.AWS_GHCR_ACCESS_TOKEN }}","password":"${{ secrets.AWS_GHCR_ACCESS_TOKEN }}"}'
          TAGS='Key=project,Value=OceanWatch Key=program,Value=Oceans Key=application,Value=OceanWatch Key=copilot-application,Value=ocean-watch Key=copilot-environment,Value=${{ github.head_ref }}'
          DESCRIPTION='Read-only access to github container registry'
          
          # Check if the AWS Secret already exists
          SECRET_INFO=$(aws secretsmanager describe-secret --secret-id $SECRET_NAME || echo "not_found")
          
          if [[ "$SECRET_INFO" == "not_found" ]]; then
            echo "Secret does not exist, creating..."
            # Create the secret and extract the ARN
            SECRET_OUTPUT=$(aws secretsmanager create-secret --name $SECRET_NAME --secret-string "$SECRET_VALUE" --tags $TAGS --description $DESCRIPTION)
            SECRET_ARN=$(echo $SECRET_OUTPUT | jq -r .ARN)
            echo "Secret created with ARN: $SECRET_ARN"
          else
            echo "Secret already exists."
            # Extract the ARN from existing secret info
            SECRET_ARN=$(echo $SECRET_INFO | jq -r .ARN)
          fi

          # Store the ARN for use in subsequent steps
          echo "SECRET_ARN=$SECRET_ARN" >> $GITHUB_ENV

      - name: Deploy App to AWS using Copilot
        run: |
          export IMAGE_LOCATION="${{ steps.generate_ghcr_tag.outputs.image }}"
          export GHCR_ACCESS="${{ env.SECRET_ARN }}"
          # Check if the service exists
          if ! copilot svc show --name nextjs-app --json; then
            echo "Service does not exist, initializing..."
            # Initialize service if it doesn't exist
            if ! copilot svc init --app ocean-watch --name nextjs-app --svc-type "Load Balanced Web Service"; then
              echo "Failed to initialize service."
              exit 1
            fi
          else
            echo "Service already exists."
          fi
          # Deploy the new service
          if ! copilot svc deploy --force --name nextjs-app --env ${{ github.head_ref }}; then
            echo "Failed to deploy service."
            copilot svc delete --name nextjs-app --env ${{ github.head_ref }} --yes
            exit 1
          fi
          SERVICE_INFO=$(copilot svc show --app ocean-watch --name nextjs-app --json)
          echo "$SERVICE_INFO" | jq .
          copilot svc status --app ocean-watch --env ${{ github.head_ref }} --name nextjs-app --json

      - name: Show Service Information
        id: service_info
        run: |
          ENV_NAME="${{ github.head_ref }}" # Capture the GitHub head reference
          SERVICE_JSON=$(copilot svc show --app ocean-watch --name nextjs-app --json)
          SERVICE_URL=$(echo "$SERVICE_JSON" | jq -r --arg ENV_NAME "$ENV_NAME" '.routes[] | select(.environment == $ENV_NAME) | .url')
          
          if [[ -z "$SERVICE_URL" || "$SERVICE_URL" == "null" ]]; then
            echo "No URL found for the specified environment: $ENV_NAME"
            echo "$SERVICE_JSON"
            exit 1
          fi
          
          echo "::set-output name=url::$SERVICE_URL"
          echo "Service URL: $SERVICE_URL"

      - name: Comment PR with Service URL
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            🚀 Deployment successful!
            🌐 Your service in environment `${{ github.head_ref }}` is now available at: ${{ steps.service_info.outputs.url }}

      - name: Setup Git Config
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Commit copilot configs
        run: |
          git add -A  # Adds all changes, including untracked files
          git diff-index --quiet HEAD || git commit -m "AWS copilot configs generated by GitHub Actions Bot"
          git push origin HEAD:${{ github.head_ref }}  # Ensure you're pushing to the correct branch